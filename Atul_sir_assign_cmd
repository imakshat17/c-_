#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <map>
#include <list>
#include <cstdlib>  // For atoi

using namespace std;

// Structure to store the data
struct Data {
    string symbol;
    int expiry;
    string optType; // XX, CE, PE
    int strikeMin;
    int strikeMax;
    int strikeGap;
};

// Function to update or add data in the map
void updateOrAddData(map<int, list<Data> >& allStreamInfo, int streamId, const Data& newData) {
    list<Data>& dataList = allStreamInfo[streamId];
    bool found = false;

    for (list<Data>::iterator it = dataList.begin(); it != dataList.end(); ++it) {
        if (it->symbol == newData.symbol &&
            it->expiry == newData.expiry &&
            it->optType == newData.optType) {
            // Update existing data
            it->strikeMin = newData.strikeMin;
            it->strikeMax = newData.strikeMax;
            it->strikeGap = it->strikeMax - it->strikeMin;
            found = true;
            break;
        }
    }

    if (!found) {
        // Add new data
        dataList.push_back(newData);
    }
}

// Function to read the file and populate the map
map<int, list<Data> > readFileAndPopulateMap(const string& filename) {
    map<int, list<Data> > allStreamInfo;
    ifstream file(filename.c_str());
    string line;

    if (!file.is_open()) {
        cerr << "Error opening file: " << filename << endl;
        return allStreamInfo;
    }

    // Skip header line
    getline(file, line);

    while (getline(file, line)) {
        stringstream ss(line);
        string res, streamIdStr, tokenStr, instType, symbol, expiryStr, strikeStr, optType;

        getline(ss, res, ',');
        getline(ss, streamIdStr, ',');
        getline(ss, tokenStr, ',');
        getline(ss, instType, ',');
        getline(ss, symbol, ',');
        getline(ss, expiryStr, ',');
        getline(ss, strikeStr, ',');
        getline(ss, optType, ',');

        // Check if any required field is missing
        if (streamIdStr.empty() || expiryStr.empty() || strikeStr.empty()) {
            cerr << "Error: Missing required field(s) in line: " << line << endl;
            continue;
        }

        int streamId = atoi(streamIdStr.c_str());
        int expiry = atoi(expiryStr.c_str());
        int strike = atoi(strikeStr.c_str());

        // Set strikeMin and strikeMax to the same value initially
        int strikeMin = strike;
        int strikeMax = strike;
        int strikeGap = 0; // Assuming gap is 0 by default

        Data data = {symbol, expiry, optType, strikeMin, strikeMax, strikeGap};

        // Update or add data in the map
        updateOrAddData(allStreamInfo, streamId, data);
    }

    file.close();
    return allStreamInfo;
}

// Function to generate the report
void generateReport(const map<int, list<Data> >& allStreamInfo, const string& reportFilename) {
    ofstream reportFile(reportFilename.c_str());

    if (!reportFile.is_open()) {
        cerr << "Error opening report file: " << reportFilename << endl;
        return;
    }

    reportFile << "StreamId,Symbol,Expiry,OptType,StrikeMin,StrikeMax,StrikeGap\n";

    for (map<int, list<Data> >::const_iterator it = allStreamInfo.begin(); it != allStreamInfo.end(); ++it) {
        int streamId = it->first;
        const list<Data>& dataList = it->second;

        for (list<Data>::const_iterator dataIt = dataList.begin(); dataIt != dataList.end(); ++dataIt) {
            reportFile << streamId << ","
                       << dataIt->symbol << ","
                       << dataIt->expiry << ","
                       << dataIt->optType << ","
                       << dataIt->strikeMin << ","
                       << dataIt->strikeMax << ","
                       << dataIt->strikeGap << "\n";
        }
    }

    reportFile.close();
}
int main(int argc, char* argv[]) {
    // Check if the correct number of arguments is provided
    if (argc != 3) {
        cerr << "Usage: " << argv[0] << " <input_file> <output_file>" << endl;
        return 1; // Return an error code
    }

    // Retrieve filenames from command-line arguments
    string filename = argv[1];        // Input file
    string reportFilename = argv[2];  // Output file

    // Read data from file and populate the map
    map<int, list<Data> > allStreamInfo = readFileAndPopulateMap(filename);
    
    // Generate the report
    generateReport(allStreamInfo, reportFilename);

    return 0;
}


