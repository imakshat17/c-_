#include <iostream>
#include <fstream>
#include <string>
#include <unordered_map>
#include <sstream>
#include <vector>
#include <dirent.h>
#include <sys/types.h>
#include <cstring>
#include <map>
#include <algorithm>
#include <cctype>
#include <string>
using namespace std;

// Enum for different order types (Transaction codes)
enum ORDER {
    NEW = 2073,
    MOD = 2074,
    CXL = 2075,
    TRD = 2222
};

// Enum for indices and offsets
enum INDEX_ID {
    TCODE = 2,
    TAG = 4,      // Assuming 'Tag' is at index 4
    TOKEN_1 = 11, // Token index for order files
    TOKEN_2 = 23, // Token index for trade files
    CLIENT_OFFSET = 111, // Client offset
    TRADE_ACCOUNT_INDEX = 9,   // Trade account index
    ORDER_ACCOUNT_INDEX = 15    // Order file account index
};

struct OrderDetails {
    int newOrderCount = 0;
    int modCount = 0;
    int cxlCount = 0;
    int trdCount = 0;

    string ToString() const {
        stringstream ss;
        double OTR = (trdCount != 0) ? static_cast<double>(modCount) / trdCount : static_cast<double>(modCount) / 1;
        ss << newOrderCount << "," << modCount << "," << cxlCount << "," << trdCount << "," << OTR;
        return ss.str();
    }
};

// ClientWise struct for tracking details per client
struct ClientWise {
    int clientID;
    map<int, OrderDetails> instrumentWise;
    OrderDetails totalOrderDetails;

    void AddDetails(int instrumentKey, int ordTcode) {
        if (instrumentWise.find(instrumentKey) == instrumentWise.end()) {
            instrumentWise[instrumentKey] = OrderDetails();
        }

        switch (ordTcode) {
            case NEW:
                instrumentWise[instrumentKey].newOrderCount++;
                totalOrderDetails.newOrderCount++;
                break;
            case MOD:
                instrumentWise[instrumentKey].modCount++;
                totalOrderDetails.modCount++;
                break;
            case CXL:
                instrumentWise[instrumentKey].cxlCount++;
                totalOrderDetails.cxlCount++;
                break;
            case TRD:
                instrumentWise[instrumentKey].trdCount++;
                totalOrderDetails.trdCount++;
                break;
        }
    }
};

struct Accountwise {
    int accountNumber;
    map<int, OrderDetails> instrumentWise;
    OrderDetails totalOrderDetails;

    void AddDetails(int instrumentKey, int ordTcode) {
        if (instrumentWise.find(instrumentKey) == instrumentWise.end()) {
            instrumentWise[instrumentKey] = OrderDetails();
        }

        switch (ordTcode) {
            case NEW:
                instrumentWise[instrumentKey].newOrderCount++;
                totalOrderDetails.newOrderCount++;
                break;
            case MOD:
                instrumentWise[instrumentKey].modCount++;
                totalOrderDetails.modCount++;
                break;
            case CXL:
                instrumentWise[instrumentKey].cxlCount++;
                totalOrderDetails.cxlCount++;
                break;
            case TRD:
                instrumentWise[instrumentKey].trdCount++;
                totalOrderDetails.trdCount++;
                break;
        }
    }
};

struct DataStructure {
    ClientWise clientWiseStatus[20]; // Array to store client-wise statuses
    map<int, Accountwise> accountwise; // Map for account-wise tracking

    // Method to add details per client and per instrument
    void AddDetails(int clientIndex, int accountkey, int tag, int instrumentKey, int ordTcode) {
        if (clientIndex < 0 || clientIndex >= 20) {
            cerr << "Invalid client index: " << clientIndex << endl;
            return;
        }
        clientWiseStatus[clientIndex].clientID = tag;
        clientWiseStatus[clientIndex].AddDetails(instrumentKey, ordTcode);

        if (accountwise.find(accountkey) == accountwise.end()) {
            accountwise[accountkey] = Accountwise();
        }
        accountwise[accountkey].AddDetails(instrumentKey, ordTcode);
    }
};

// Class to process and manage OTR data
class OTR {
private:
    DataStructure structObj;

    // Helper function to safely convert string to integer
   // Helper function to safely convert string to integer
string TrimWhitespace(const string& str) {
    string trimmedStr = str;
    trimmedStr.erase(trimmedStr.begin(), std::find_if(trimmedStr.begin(), trimmedStr.end(), [](unsigned char ch) {
        return !std::isspace(ch);
    }));
    trimmedStr.erase(std::find_if(trimmedStr.rbegin(), trimmedStr.rend(), [](unsigned char ch) {
        return !std::isspace(ch);
    }).base(), trimmedStr.end());
    return trimmedStr;
}


int SafeStoi(const string& str) {
    string trimmedStr = TrimWhitespace(str);

    if (trimmedStr.empty()) {
       // cerr << "Empty string provided for conversion." << endl;
        return -1; // Return an invalid number to indicate failure
    }

    try {
        size_t pos;
        int result = stoi(trimmedStr, &pos);

        if (pos < trimmedStr.length()) {
      //      cerr << "Non-numeric characters found in string: " << trimmedStr << endl;
            return -1; // Return an invalid number to indicate failure
        }

        return result;
    } catch (const invalid_argument&) {
   //     cerr << "Invalid argument exception for string: " << trimmedStr << endl;
        return -1; // Return an invalid number to indicate failure
    } catch (const out_of_range&) {
     //   cerr << "Out of range exception for string: " << trimmedStr << endl;
        return -1; // Return an invalid number to indicate failure
    }
}

public:
    // Function to process a single line from the file
    // Helper function to safely convert string to integer


   void ReadLine(string& line) {
    istringstream stream(line);
    string segment;
    vector<string> fields;

    while (getline(stream, segment, '|')) {
        fields.push_back(segment);
    }

    // Debugging: Print all fields


    if (fields.size() > max(TOKEN_1, TOKEN_2)) {
        int tCode = SafeStoi(fields[TCODE]);   // Transaction code

        if (tCode == -1) return; // Skip processing if transaction code conversion failed

        // Extract the first three digits as Tag from the corresponding field
        string tagStr = fields[TAG].substr(0, 3);
        int tag = SafeStoi(tagStr); // Convert the extracted string to an integer

        if (tag == -1) return; // Skip processing if tag conversion failed

        int clientIndex = tag - CLIENT_OFFSET; // Calculate client index

        int instrumentKey;
        int accountKey;

        if (tCode == TRD) {
    instrumentKey = SafeStoi(fields[TOKEN_2]); // Use token position for trade files
    if (fields[TRADE_ACCOUNT_INDEX].empty()) {
       // cout << "Trade account index empty, skipping line." << endl;
        return;
    }
    accountKey = SafeStoi(fields[TRADE_ACCOUNT_INDEX]); // Handle non-empty account index
} else {
    instrumentKey = SafeStoi(fields[TOKEN_1]); // Use token position for order files
    if (fields[ORDER_ACCOUNT_INDEX].empty()) {
    //    cout << "Order account index empty, skipping line." << endl;
        return;
    }
    accountKey = SafeStoi(fields[ORDER_ACCOUNT_INDEX]); // Handle non-empty account index
}

        if (instrumentKey == -1 || accountKey == -1 || accountKey==1) {
          //  cout << "Invalid instrument key or account key, skipping line." << endl;
            return; // Skip processing if any conversion failed
        }

        structObj.AddDetails(clientIndex, accountKey, tag, instrumentKey, tCode);
    }
}


    // Process an entire file
    void ProcessFile(const string& filePath) {
        ifstream file(filePath);
        if (!file.is_open()) {
            cerr << "Error opening file: " << filePath << endl;
            return;
        }

        string line;
        getline(file, line);  // Skip the header

        while (getline(file, line)) {
            ReadLine(line);
        }

        file.close();
    }

    // Read all files from a directory
    void ReadDirectory(const string& folderPath) {
        DIR* dir;
        struct dirent* ent;

        if ((dir = opendir(folderPath.c_str())) != nullptr) {
            while ((ent = readdir(dir)) != nullptr) {
                string fileName = ent->d_name;

                if (fileName == "." || fileName == "..") {
                    continue;
                }

                string filePath = folderPath + "/" + fileName;
                ProcessFile(filePath);  // Process each file
            }
            closedir(dir);
        } else {
            cerr << "Could not open directory: " << folderPath << endl;
        }
    }

    // Write the report file with client-wise and account-wise details
    void WriteReportFiles(const string& outputFolderPath) {
        // Create maps to aggregate details for each client and account
        map<int, ofstream> clientFiles;
        map<int, ofstream> accountFiles;

        // Open all necessary files for writing (one per client)
        for (int i = 0; i < 20; ++i) {
            const ClientWise& client = structObj.clientWiseStatus[i];
            if (client.clientID != 0 && !client.instrumentWise.empty()) {  // Ensure clientID is set
                string filePath = outputFolderPath + "/client_" + to_string(client.clientID) + ".txt";
                ofstream outFile(filePath);

                if (!outFile.is_open()) {
                    cerr << "Error opening output file: " << filePath << endl;
                    continue;
                }

                clientFiles[client.clientID] = move(outFile);
            }
        }

        // Write details to the appropriate files
        for (int i = 0; i < 20; ++i) {
            const ClientWise& client = structObj.clientWiseStatus[i];
            if (client.clientID != 0) {
                ofstream& outFile = clientFiles[client.clientID];

                // Write the header for the client file
              //  outFile << "Client ID: " << client.clientID << endl;

                // Check if the client has any instruments
                if (client.instrumentWise.empty()) {
                    outFile << "No instrument data available for this client." << endl;
                } else {
                    // Write details for each instrument
                    for (const auto& pair : client.instrumentWise) {
                        int instrumentKey = pair.first;
                        const OrderDetails& details = pair.second;
                        outFile<<client.clientID<<",";
                        outFile << instrumentKey << ",";
                        outFile << details.ToString() << endl;
                      //  outFile << "--------------------------" << endl;  // Separator for readability
                    }
                }
            }
        }

        // Close all client files
        for (auto& entry : clientFiles) {
            entry.second.close();
        }

        // Open all necessary files for writing (one per account)
        for (const auto& entry : structObj.accountwise) {
            int accountKey = entry.first;
            const Accountwise& account = entry.second;

            string filePath = outputFolderPath + "/account_" + to_string(accountKey) + ".txt";
            ofstream outFile(filePath);

            if (!outFile.is_open()) {
                cerr << "Error opening output file: " << filePath << endl;
                continue;
            }

            // Write the header for the account file
          //  outFile << "Account Number: " << accountKey << endl;

            // Check if the account has any instruments
            if (account.instrumentWise.empty()) {
                outFile << "No instrument data available for this account." << endl;
            } else {
                // Write details for each instrument
                for (const auto& pair : account.instrumentWise) {
                    int instrumentKey = pair.first;
                    const OrderDetails& details = pair.second;
                    outFile<<accountKey<<",";
                    outFile<< instrumentKey <<",";
                    outFile  << details.ToString() << endl;
                     // Separator for readability
                }
            }

            outFile.close();
        }
    }
};

int main() {
    OTR processor;
    processor.ReadDirectory("Logs");
    string outputFolderPath = "outputFiles";
    processor.WriteReportFiles(outputFolderPath);

    return 0;
}
